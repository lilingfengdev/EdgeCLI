name: Preview Build

permissions:
  contents: write

on:
  push:
    branches:
      - '*'
    tags-ignore:
      - 'v*'
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build preview from'
        required: false
        default: 'main'

env:
  PYTHON_VERSION: '3.13'
  NUITKA_VERSION: '2.7.12'
  UPX_VERSION: '5.0.2'

jobs:
  cleanup-old-previews:
    name: Cleanup old preview releases
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Delete old preview releases
      uses: actions/github-script@v7
      with:
        script: |
          const { data: releases } = await github.rest.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const previewReleases = releases.filter(release => 
            release.prerelease && 
            (release.tag_name.includes('dev-') || 
             release.tag_name.includes('preview-') ||
             release.tag_name.includes('feature-'))
          );
          
          // Keep only the latest 5 preview releases
          const releasesToDelete = previewReleases.slice(5);
          
          for (const release of releasesToDelete) {
            console.log(`Deleting old preview release: ${release.tag_name}`);
            try {
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
              
              // Also delete the tag
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${release.tag_name}`
              });
            } catch (error) {
              console.log(`Failed to delete ${release.tag_name}: ${error.message}`);
            }
          }

  build-preview:
    name: Build Preview on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: cleanup-old-previews
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: x64
            executable_suffix: .exe
          - os: ubuntu-latest
            platform: linux
            arch: x64
            executable_suffix: ''
          - os: macos-latest
            platform: macos
            arch: x64
            executable_suffix: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch || github.ref }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Setup MSVC environment (Windows)
      if: matrix.platform == 'windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install system dependencies (Ubuntu)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential zlib1g-dev libffi-dev upx-ucl

    - name: Install system dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        brew install zlib upx

    - name: Install system dependencies (Windows)
      if: matrix.platform == 'windows'
      run: |
        # 安装 UPX
        $upxVersion = "${{ env.UPX_VERSION }}"
        $upxUrl = "https://github.com/upx/upx/releases/download/v$upxVersion/upx-$upxVersion-win64.zip"
        Invoke-WebRequest -Uri $upxUrl -OutFile "upx.zip"
        Expand-Archive -Path "upx.zip" -DestinationPath "."
        $upxPath = "upx-$upxVersion-win64/upx.exe"
        Move-Item $upxPath "C:/Windows/System32/upx.exe"
        # 验证安装
        upx --version

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka==${{ env.NUITKA_VERSION }}
        pip install -r requirements.txt

    - name: Get preview version
      id: version
      shell: bash
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BRANCH_NAME=${BRANCH_NAME//\//-}  # Replace / with -
        COMMIT_HASH=$(git rev-parse --short HEAD)
        TIMESTAMP=$(date +%Y%m%d-%H%M)
        
        if [[ "$BRANCH_NAME" == "develop" ]]; then
          VERSION="dev-${COMMIT_HASH}-${TIMESTAMP}"
        else
          VERSION="preview-${BRANCH_NAME}-${COMMIT_HASH}-${TIMESTAMP}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
        echo "Building preview version: $VERSION"

    - name: Build
      run: |
        python build.py --version ${{ steps.version.outputs.version }} --clean

    - name: Test executable
      shell: bash
      run: |
        cd dist
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          ./EdgeCLI.exe --version || echo "Version check failed, but executable exists"
        else
          ./EdgeCLI --version || echo "Version check failed, but executable exists"
        fi
        echo "✅ Executable test completed"

    - name: Create archive
      shell: bash
      run: |
        cd dist
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          7z a -tzip EdgeCLI-${{ steps.version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.zip EdgeCLI${{ matrix.executable_suffix }}
        else
          tar -czf EdgeCLI-${{ steps.version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz EdgeCLI${{ matrix.executable_suffix }}
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EdgeCLI-preview-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          dist/EdgeCLI-${{ steps.version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.*
        retention-days: 7

    - name: Create Preview Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: 🚧 EdgeCLI Preview ${{ steps.version.outputs.version }}
        draft: false
        prerelease: true
        files: |
          dist/EdgeCLI-${{ steps.version.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.*
        body: |
          ## 🚧 EdgeCLI Preview Release
          
          **⚠️ 这是一个预览版本，仅用于测试目的，不建议在生产环境中使用。**
          
          ### 构建信息
          - **分支**: `${{ steps.version.outputs.branch }}`
          - **提交**: `${{ github.sha }}`
          - **构建时间**: `${{ github.run_number }}`
          
          ### 下载说明
          - **Windows**: 下载 `EdgeCLI-*-windows-x64.zip`
          - **Linux**: 下载 `EdgeCLI-*-linux-x64.tar.gz`  
          - **macOS**: 下载 `EdgeCLI-*-macos-x64.tar.gz`
          
          ### 使用方法
          1. 解压下载的文件
          2. 运行 `EdgeCLI` 可执行文件
          3. 程序会自动下载所需的 XRay 核心文件
          4. 按照提示进行配置
          
          ### 特性
          - ✅ 使用 Nuitka 编译，启动速度更快
          - ✅ 集成 UPX 压缩插件，文件体积更小
          - ✅ Windows 平台使用 MSVC 编译器优化
          - ✅ 运行时自动下载 XRay 核心文件
          - ✅ 支持 Windows、Linux、macOS 三大平台
          
          ### 注意事项
          - 这是开发中的版本，可能包含未完成的功能或错误
          - 预览版本会定期清理，请及时下载测试
          - 如发现问题，请在 Issues 中反馈
          
          **提交详情**: https://github.com/${{ github.repository }}/commit/${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
